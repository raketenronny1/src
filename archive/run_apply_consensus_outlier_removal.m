% run_apply_consensus_outlier_strategy.m % CORRECTED SCRIPT NAME from your log
% (or run_apply_consensus_outlier_removal.m as we've been calling it)
%
% PURPOSE:
%   Applies a consensus (T2 AND Q) outlier removal strategy to the training
%   dataset. It loads the T2/Q statistics and thresholds calculated by
%   a prior exploratory analysis script (e.g., run_exploratory_outlier_analysis.m)
%   and generates the cleaned datasets.
%
% INPUTS (must be present in specified paths):
%   - dataTableTrain.mat: Original training data table with probe-level info.
%                         'CombinedSpectra' should hold the preprocessed spectra
%                         that were used for the T2/Q analysis in the exploratory script.
%   - *_ExploratoryOutlier_AnalysisData.mat: File generated by
%     run_exploratory_outlier_analysis.m, containing T2/Q values, thresholds,
%     mappings, and PCA model for ALL training spectra. This script will use
%     the LATEST such file found in the exploratory results directory.
%   - wavenumbers_roi.mat: Wavenumber vector.
%
% OUTPUTS (saved to 'data' and 'results' directories):
%   - YYYYMMDD_training_set_no_outliers_T2andQ.mat: Cleaned flat dataset (saved to 'data' dir).
%   - YYYYMMDD_dataTableTrain_Cleaned_Consensus_T2andQ.mat: Cleaned table with
%                                                             detailed per-probe outlier info.
%                                                             (saved to 'results' dir)
%   - YYYYMMDD_PCA_T2andQ_Consensus_RemovedOutlierList.csv: List of removed consensus outliers.
%                                                             (saved to 'results' dir)
%
% DATE: 2025-05-17

%% --- 0. Configuration & Setup ---
clear; clc; close all; % Standard script start
fprintf('Applying Consensus (T2 AND Q) Outlier Removal - %s\n', string(datetime('now')));

% --- Define Paths ---
projectBasePath = pwd; % Assumes script is run from the project root directory
if ~exist(fullfile(projectBasePath, 'src'), 'dir') || ~exist(fullfile(projectBasePath, 'data'), 'dir')
    error(['Project structure not found or script not run from project root. ', ...
           'Please ensure MATLAB''s "Current Folder" is set to your main project root directory. ', ...
           'Current directory is: %s'], projectBasePath);
end

% ***** ENSURE THESE PATHS ARE CORRECTLY DEFINED *****
dataPath    = fullfile(projectBasePath, 'data'); % Defines dataDir
resultsDir_main = fullfile(projectBasePath, 'results'); % Main results for this script's output tables/CSVs
% Directory where the exploratory analysis .mat file is located
exploratoryResultsDir = fullfile(projectBasePath, 'results', 'Phase1_OutlierExploration');
% *****************************************************

% Ensure output directories exist
if ~isfolder(resultsDir_main), mkdir(resultsDir_main); end
if ~isfolder(dataPath), error('Data directory %s not found. It is required for saving the cleaned training set.', dataPath); end
if ~isfolder(exploratoryResultsDir), error('Exploratory results directory %s not found. Run exploratory script first.', exploratoryResultsDir); end

P.datePrefix = string(datetime('now','Format','yyyyMMdd')); % For output filenames
fprintf('Setup complete. Output files will be prefixed with %s.\n', P.datePrefix);
fprintf('Cleaned training_set .mat will be saved to: %s\n', dataPath); % Uses dataPath
fprintf('Cleaned dataTable and outlier list will be saved to: %s\n', resultsDir_main);

%% --- 1. Load Necessary Data ---
fprintf('\n--- 1. Loading Input Data ---\n');

% Load original dataTableTrain
trainDataTableFile = fullfile(dataPath, 'data_table_train.mat'); % Uses dataPath
if ~exist(trainDataTableFile, 'file'), error('File %s not found in %s.', 'data_table_train.mat', dataPath); end
fprintf('Loading original dataTableTrain from: %s\n', trainDataTableFile);
loadedVars = load(trainDataTableFile, 'dataTableTrain');
if ~isfield(loadedVars, 'dataTableTrain'), error('Variable "dataTableTrain" not found in %s.', trainDataTableFile); end
dataTableTrain_original = loadedVars.dataTableTrain;
fprintf('Original dataTableTrain loaded with %d probes.\n', height(dataTableTrain_original));

% Load wavenumbers_roi
wavenumbersFile = fullfile(dataPath, 'wavenumbers.mat'); % Uses dataPath
if ~exist(wavenumbersFile, 'file'), error('File %s not found in %s.', 'wavenumbers.mat', dataPath); end
fprintf('Loading wavenumbers_roi from: %s\n', wavenumbersFile);
wavenumbers_data_loaded = load(wavenumbersFile, 'wavenumbers_roi');
if ~isfield(wavenumbers_data_loaded, 'wavenumbers_roi'), error('Variable "wavenumbers_roi" not found in %s.', wavenumbersFile); end
wavenumbers_roi = wavenumbers_data_loaded.wavenumbers_roi;
if iscolumn(wavenumbers_roi), wavenumbers_roi = wavenumbers_roi'; end
fprintf('wavenumbers_roi available (%d points).\n', length(wavenumbers_roi));
num_wavenumber_points = length(wavenumbers_roi);

% Load the Exploratory Outlier Analysis Data (contains T2/Q values, thresholds, mappings)
exploratoryFiles = dir(fullfile(exploratoryResultsDir, '*_ExploratoryOutlier_AnalysisData.mat'));
if isempty(exploratoryFiles)
    error('No "*_ExploratoryOutlier_AnalysisData.mat" file found in %s. Run exploratory script first.', exploratoryResultsDir);
end
[~,idxSortExploratory] = sort([exploratoryFiles.datenum],'descend');
latestExploratoryFile = fullfile(exploratoryResultsDir, exploratoryFiles(idxSortExploratory(1)).name);
fprintf('Loading exploratory outlier analysis data from: %s\n', latestExploratoryFile);
loadedExploratoryData = load(latestExploratoryFile, 'exploratoryOutlierData');
if ~isfield(loadedExploratoryData, 'exploratoryOutlierData')
    error('Variable "exploratoryOutlierData" not found in %s.', latestExploratoryFile);
end
expData = loadedExploratoryData.exploratoryOutlierData;
fprintf('Exploratory data loaded. Alpha used: %.4f, k_model: %d\n', expData.alpha_T2_Q, expData.k_model); % Adjusted alpha format

% Extract necessary variables from expData
T2_values_all                   = expData.T2_values_all_spectra;
Q_values_all                    = expData.Q_values_all_spectra;
T2_threshold                    = expData.T2_threshold;
Q_threshold                     = expData.Q_threshold;
Original_ProbeRowIndices_map    = expData.Original_ProbeRowIndices_map;
Original_SpectrumIndexInProbe_map = expData.Original_SpectrumIndexInProbe_map;
Patient_ID_map                  = expData.Patient_ID_map;
y_numeric_map                   = expData.y_numeric_map;
y_categorical_map               = expData.y_categorical_map;

% Reconstruct X_train from the original dataTableTrain, ensuring order matches T2/Q values
X_train_for_removal = [];
fprintf('Reconstructing X_train_for_removal from dataTableTrain_original.CombinedSpectra to match exploratory analysis...\n');
num_spectra_reconstructed = 0;
for i_recon = 1:height(dataTableTrain_original)
    % Use the SAME spectra source as used in run_exploratory_outlier_analysis.m Section 1
    % This is likely dataTableTrain_original.CombinedSpectra
    spectraMatrix_recon = dataTableTrain_original.CombinedSpectra{i_recon};
    
    if isempty(spectraMatrix_recon) || ~isnumeric(spectraMatrix_recon) || ndims(spectraMatrix_recon) ~= 2
        % This probe's spectra might have been skipped in exploratory script's Section 1, fine to skip here too
        continue;
    end
    if size(spectraMatrix_recon,1) == 0
        continue;
    end
    if size(spectraMatrix_recon,2) ~= num_wavenumber_points
        % This check should align with the one in exploratory script's Section 1
        continue;
    end
    X_train_for_removal = [X_train_for_removal; spectraMatrix_recon];
    num_spectra_reconstructed = num_spectra_reconstructed + size(spectraMatrix_recon,1);
end

if num_spectra_reconstructed ~= length(T2_values_all)
    error(['Mismatch in number of spectra. Reconstructed X_train_for_removal has %d spectra, ' ...
           'while loaded T2_values_all from exploratory data has %d values. \nEnsure dataTableTrain_original.CombinedSpectra '...
           'used here is consistent with data processed in run_exploratory_outlier_analysis.m.'], ...
           num_spectra_reconstructed, length(T2_values_all));
end
fprintf('Successfully mapped and reconstructed X_train_for_removal (%d spectra) for outlier processing.\n', size(X_train_for_removal,1));

%% --- 2. Apply Consensus (T2 AND Q) Outlier Removal Strategy ---
fprintf('\n--- 2. Applying Consensus (T2 AND Q) Outlier Removal ---\n');

flag_T2_all = (T2_values_all > T2_threshold);
flag_Q_all  = (Q_values_all > Q_threshold);

% Consensus Outlier Strategy
consensus_outlier_indices_logical = flag_T2_all & flag_Q_all;
num_consensus_outliers = sum(consensus_outlier_indices_logical);
fprintf('%d consensus outliers (T2 AND Q) identified for removal.\n', num_consensus_outliers);

good_indices_logical = ~consensus_outlier_indices_logical;

%% --- 3. Create Cleaned Flat Dataset for Machine Learning ---
fprintf('\n--- 3. Creating Cleaned Flat Dataset (Consensus Strategy) ---\n');

X_train_no_outliers_AND = X_train_for_removal(good_indices_logical, :);
y_train_no_outliers_AND_cat = y_categorical_map(good_indices_logical);
y_train_no_outliers_AND_num = y_numeric_map(good_indices_logical);
Patient_ID_train_no_outliers_AND = Patient_ID_map(good_indices_logical);
Original_ProbeRowIndices_no_outliers_AND = Original_ProbeRowIndices_map(good_indices_logical);
Original_SpectrumIndexInProbe_no_outliers_AND = Original_SpectrumIndexInProbe_map(good_indices_logical);

fprintf('Size of cleaned X_train_no_outliers_AND: %d spectra x %d features.\n', ...
      size(X_train_no_outliers_AND, 1), size(X_train_no_outliers_AND, 2));

% This is line 133 where the error occurred
cleanedFlatDatasetFilename = fullfile(dataPath, sprintf('%s_training_set_no_outliers_T2andQ.mat', P.datePrefix)); % Uses dataPath
save(cleanedFlatDatasetFilename, ...
     'X_train_no_outliers_AND', ...
     'y_train_no_outliers_AND_cat', 'y_train_no_outliers_AND_num', ...
     'Patient_ID_train_no_outliers_AND', ...
     'Original_ProbeRowIndices_no_outliers_AND', ...
     'Original_SpectrumIndexInProbe_no_outliers_AND', ...
     'wavenumbers_roi', ...
     'expData', ... % Save the loaded exploratoryOutlierData struct for traceability
     '-v7.3');
fprintf('Cleaned flat training dataset (T2 AND Q strategy) saved to: %s\n', cleanedFlatDatasetFilename);

%% --- 4. Create Cleaned dataTableTrain with Consensus Outlier Details ---
fprintf('\n--- 4. Creating Cleaned dataTableTrain (Consensus Strategy) ---\n');
dataTableTrain_cleaned_consensus = dataTableTrain_original;
numProbes = height(dataTableTrain_cleaned_consensus);

dataTableTrain_cleaned_consensus.CombinedSpectra_ConsensusCleaned = cell(numProbes, 1);
dataTableTrain_cleaned_consensus.OutlierSpectra_Consensus = cell(numProbes, 1);
dataTableTrain_cleaned_consensus.OutlierIndicesInSample_Consensus = cell(numProbes, 1);
dataTableTrain_cleaned_consensus.NumOriginalSpectraInProbe = zeros(numProbes,1);
dataTableTrain_cleaned_consensus.NumOutliers_Consensus = zeros(numProbes,1);
dataTableTrain_cleaned_consensus.NumSpectra_ConsensusCleaned = zeros(numProbes,1);

for i = 1:numProbes
    original_probe_spectra = dataTableTrain_original.CombinedSpectra{i};
    dataTableTrain_cleaned_consensus.NumOriginalSpectraInProbe(i) = size(original_probe_spectra,1);

    if isempty(original_probe_spectra) || dataTableTrain_cleaned_consensus.NumOriginalSpectraInProbe(i) == 0
        dataTableTrain_cleaned_consensus.CombinedSpectra_ConsensusCleaned{i} = zeros(0, num_wavenumber_points);
        dataTableTrain_cleaned_consensus.OutlierSpectra_Consensus{i} = zeros(0, num_wavenumber_points);
        dataTableTrain_cleaned_consensus.OutlierIndicesInSample_Consensus{i} = [];
        continue;
    end

    global_indices_this_probe = find(Original_ProbeRowIndices_map == i);

    if isempty(global_indices_this_probe) || length(global_indices_this_probe) ~= size(original_probe_spectra,1)
         warning('Probe %d (Diss_ID: %s): Mismatch between spectra count in dataTableTrain_original and mapping. Skipping consensus cleaning for this probe.', i, dataTableTrain_original.Diss_ID{i});
         dataTableTrain_cleaned_consensus.CombinedSpectra_ConsensusCleaned{i} = original_probe_spectra;
         dataTableTrain_cleaned_consensus.OutlierSpectra_Consensus{i} = zeros(0, num_wavenumber_points);
         dataTableTrain_cleaned_consensus.OutlierIndicesInSample_Consensus{i} = [];
         dataTableTrain_cleaned_consensus.NumSpectra_ConsensusCleaned(i) = size(original_probe_spectra,1);
         continue;
    end
    
    consensus_flags_this_probe = consensus_outlier_indices_logical(global_indices_this_probe);
    internal_indices_original_this_probe = (1:size(original_probe_spectra,1))';
    
    dataTableTrain_cleaned_consensus.CombinedSpectra_ConsensusCleaned{i} = original_probe_spectra(~consensus_flags_this_probe, :);
    dataTableTrain_cleaned_consensus.OutlierSpectra_Consensus{i} = original_probe_spectra(consensus_flags_this_probe, :);
    dataTableTrain_cleaned_consensus.OutlierIndicesInSample_Consensus{i} = internal_indices_original_this_probe(consensus_flags_this_probe);
    dataTableTrain_cleaned_consensus.NumOutliers_Consensus(i) = sum(consensus_flags_this_probe);
    dataTableTrain_cleaned_consensus.NumSpectra_ConsensusCleaned(i) = size(dataTableTrain_cleaned_consensus.CombinedSpectra_ConsensusCleaned{i},1);
end

cleanedTableFilename_mat = fullfile(resultsDir_main, sprintf('%s_dataTableTrain_Cleaned_Consensus_T2andQ.mat', P.datePrefix)); % Uses resultsDir_main
save(cleanedTableFilename_mat, 'dataTableTrain_cleaned_consensus');
fprintf('Cleaned dataTableTrain (Consensus T2 AND Q strategy) saved to: %s\n', cleanedTableFilename_mat);

overview_excel_consensus = dataTableTrain_cleaned_consensus;
overview_excel_consensus.OutlierIndicesInSample_Consensus_str = cellfun(@(x) num2str(x(:)'), overview_excel_consensus.OutlierIndicesInSample_Consensus, 'UniformOutput', false);
colsToExport_excel = {'Diss_ID', 'Patient_ID', 'WHO_Grade', 'NumOriginalSpectraInProbe', ...
                      'NumSpectra_ConsensusCleaned', 'NumOutliers_Consensus', ...
                      'OutlierIndicesInSample_Consensus_str'};
varsToExportFinal_excel = intersect(colsToExport_excel, overview_excel_consensus.Properties.VariableNames, 'stable');
overviewFilename_xlsx_consensus = fullfile(resultsDir_main, sprintf('%s_dataTableTrain_Cleaned_Consensus_T2andQ_Overview.xlsx', P.datePrefix)); % Uses resultsDir_main
try
    writetable(overview_excel_consensus(:, varsToExportFinal_excel), overviewFilename_xlsx_consensus);
    fprintf('Overview of the consensus-cleaned table saved as Excel: %s\n', overviewFilename_xlsx_consensus);
catch ME_excel_save_consensus
    fprintf('Could not save Excel overview of consensus-cleaned table: %s\n', ME_excel_save_consensus.message);
end

%% --- 5. Save List of Removed Consensus Outliers ---
fprintf('\n--- 5. Saving List of Removed Consensus Outliers ---\n');
if num_consensus_outliers > 0
    consensus_outliers_table = table(...
        Patient_ID_map(consensus_outlier_indices_logical), ...
        Original_ProbeRowIndices_map(consensus_outlier_indices_logical), ...
        Original_SpectrumIndexInProbe_map(consensus_outlier_indices_logical), ...
        T2_values_all(consensus_outlier_indices_logical), ...
        Q_values_all(consensus_outlier_indices_logical), ...
        'VariableNames', {'Patient_ID', 'Original_Probe_Row_Index', 'Original_Spectrum_Index_In_Probe', 'T2_Value', 'Q_Value'});
    
    removedListFilename_csv = fullfile(resultsDir_main, sprintf('%s_PCA_T2andQ_Consensus_RemovedOutlierList.csv', P.datePrefix)); % Uses resultsDir_main
    writetable(consensus_outliers_table, removedListFilename_csv);
    fprintf('List of %d removed consensus outliers saved to: %s\n', num_consensus_outliers, removedListFilename_csv);
else
    fprintf('No consensus outliers were removed, so no list to save.\n');
end

fprintf('\n--- Consensus (T2 AND Q) Outlier Removal Script Finished ---\n');