function summary = compare_results(resultA, resultB, opts)
%COMPARE_RESULTS Perform paired t-test between two model result sets.
%   SUMMARY = COMPARE_RESULTS(RESULTA, RESULTB) extracts comparable score
%   arrays from RESULTA and RESULTB and performs a paired t-test to
%   determine whether the mean difference is significant. The inputs can be
%   numeric arrays, structs produced by the Phase 3 evaluation pipeline or
%   tables generated by AGGREGATE_PROBE_METRICS.
%
%   SUMMARY = COMPARE_RESULTS(..., OPTS) accepts name/value pairs in OPTS:
%       alpha   - Significance level for the hypothesis test (default 0.05)
%       labels  - Two-element string array with labels for RESULTA/B
%       mode    - 'spectra' (default) to use per-spectrum probabilities or
%                 'probe' to use aggregated probe probabilities when
%                 available.
%
%   The returned SUMMARY struct contains:
%       .labels           Labels for the two groups
%       .mode             Comparison mode
%       .alpha            Test alpha
%       .pValue           P-value from the t-test
%       .h                Hypothesis test result (1 => reject null)
%       .tstat            t-statistic value
%       .df               Degrees of freedom
%       .meanDifference   Mean of RESULTA - RESULTB
%       .cohensD          Cohen's d effect size (paired)
%       .meanA/.meanB     Means for each group
%       .stdA/.stdB       Standard deviations
%       .numSamples       Number of paired samples
%       .ids              Matched probe identifiers (probe mode only)
%       .valuesA/.valuesB The aligned numeric arrays used in the test
%
%   Example:
%       S = load('results/Phase3/20250101_Phase3_ParallelComparisonResults.mat');
%       a = S.resultsByVariant(1).modelSets(1).models(1);
%       b = S.resultsByVariant(1).modelSets(1).models(2);
%       compare_results(a, b, struct('mode', 'probe', 'labels', ["Baseline" "Cleaned"]));
%
%   See also: RUN_PHASE3_FINAL_EVALUATION, TTEST
%
%   Date: 2025-07-15
%
%   This helper relies on the Statistics and Machine Learning Toolbox for
%   the TTEST function.
arguments
    resultA
    resultB
    opts.alpha (1,1) double {mustBePositive} = 0.05
    opts.labels (1,2) string = ["Model A","Model B"]
    opts.mode (1,1) string {mustBeMember(opts.mode,["spectra","probe"])} = "spectra"
end

[valuesA, idsA] = extract_numeric_values(resultA, opts.mode, "A");
[valuesB, idsB] = extract_numeric_values(resultB, opts.mode, "B");

if strcmp(opts.mode, "probe")
    [valuesA, valuesB, ids] = align_by_ids(valuesA, idsA, valuesB, idsB);
else
    ids = string.empty(1,0);
end

if numel(valuesA) ~= numel(valuesB)
    error('compare_results:SizeMismatch', ...
        'Inputs must contain the same number of observations. Got %d vs %d.', ...
        numel(valuesA), numel(valuesB));
end

if numel(valuesA) < 2
    error('compare_results:TooFewObservations', ...
        'At least two paired observations are required for the t-test.');
end

[h,p,ci,stats] = ttest(valuesA, valuesB, 'Alpha', opts.alpha);

diffs = valuesA - valuesB;
stdDiff = std(diffs, 0);
if stdDiff == 0
    cohensD = NaN;
else
    cohensD = mean(diffs) / stdDiff;
end

summary = struct();
summary.labels = opts.labels;
summary.mode = opts.mode;
summary.alpha = opts.alpha;
summary.h = h;
summary.pValue = p;
summary.confidenceInterval = ci;
summary.tstat = stats.tstat;
summary.df = stats.df;
summary.meanDifference = mean(diffs);
summary.cohensD = cohensD;
summary.meanA = mean(valuesA);
summary.meanB = mean(valuesB);
summary.stdA = std(valuesA, 0);
summary.stdB = std(valuesB, 0);
summary.numSamples = numel(valuesA);
summary.valuesA = valuesA;
summary.valuesB = valuesB;
summary.ids = ids;

if nargout == 0
    display_summary(summary);
end
end

function [values, ids] = extract_numeric_values(input, mode, label)
    ids = string.empty(1,0);
    if isnumeric(input)
        values = input(:);
        return;
    end

    if isstruct(input)
        if strcmp(mode, "spectra")
            if isfield(input, 'scores')
                values = input.scores(:);
                return;
            elseif isfield(input, 'probabilities')
                values = input.probabilities(:);
                return;
            end
        else % probe mode
            if isfield(input, 'probeTable') && istable(input.probeTable)
                values = input.probeTable.MeanProbWHO3(:);
                ids = string(input.probeTable.Diss_ID);
                return;
            elseif isfield(input, 'table') && istable(input.table)
                values = input.table.MeanProbWHO3(:);
                ids = string(input.table.Diss_ID);
                return;
            elseif isfield(input, 'MeanProbWHO3') && isvector(input.MeanProbWHO3)
                values = input.MeanProbWHO3(:);
                if isfield(input, 'Diss_ID')
                    ids = string(input.Diss_ID);
                end
                return;
            end
        end
    elseif istable(input)
        if strcmp(mode, "probe") && any(strcmpi(input.Properties.VariableNames, 'MeanProbWHO3'))
            values = input.MeanProbWHO3(:);
            if any(strcmpi(input.Properties.VariableNames, 'Diss_ID'))
                ids = string(input.Diss_ID);
            end
            return;
        end
    end

    error('compare_results:UnsupportedInput', ...
        'Unable to extract numeric values from input %s for mode %s.', label, mode);
end

function [valuesA, valuesB, ids] = align_by_ids(valuesA, idsA, valuesB, idsB)
    if isempty(idsA) || isempty(idsB)
        warning('compare_results:MissingIDs', 'Probe mode requested but IDs unavailable for alignment. Proceeding without alignment.');
        ids = string.empty(1,0);
        return;
    end

    [ids, idxA, idxB] = intersect(idsA, idsB, 'stable');
    if isempty(ids)
        error('compare_results:NoOverlap', 'No overlapping probe IDs found between the two inputs.');
    end

    valuesA = valuesA(idxA);
    valuesB = valuesB(idxB);
end

function display_summary(summary)
    fprintf('\nPaired t-test on %d observations (%s mode)\n', summary.numSamples, summary.mode);
    fprintf('  %s mean: %.4f (std %.4f)\n', summary.labels(1), summary.meanA, summary.stdA);
    fprintf('  %s mean: %.4f (std %.4f)\n', summary.labels(2), summary.meanB, summary.stdB);
    fprintf('  Mean difference (%s - %s): %.4f\n', summary.labels(1), summary.labels(2), summary.meanDifference);
    fprintf('  t(%d) = %.4f, p = %.4g (alpha = %.3f)\n', summary.df, summary.tstat, summary.pValue, summary.alpha);
    fprintf('  95%% CI: [%.4f, %.4f]\n', summary.confidenceInterval(1), summary.confidenceInterval(2));
    if summary.h
        fprintf('  Result: Significant difference detected.\n');
    else
        fprintf('  Result: No significant difference detected.\n');
    end
    fprintf('  Cohen''s d: %.4f\n\n', summary.cohensD);
end
